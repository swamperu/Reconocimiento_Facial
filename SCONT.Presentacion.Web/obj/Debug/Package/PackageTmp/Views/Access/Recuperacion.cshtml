@model SCONT.Presentacion.Web.Models.ViewModel.RecoveryPasswordViewModel

@{
    Layout = null;
    ViewBag.Title = "Recuperación";
}

@Styles.Render("~/Content/css")
<style>
    .form-style {
        margin-top: 8%;
        border: 1px solid gray;
        padding: 20px 55px;
        background-color: white;
        box-shadow: inset 0 -3em 3em rgba(0,0,0,0.1), 0 0 0 2px rgb(255,255,255), 0.3em 0.3em 1em rgba(0,0,0,0.3);
    }

    .sub-header {
        margin-bottom: 25px;
    }

    label {
        font-size: 14px !important;
    }
</style>
<div class="row">
    <div class="col-md-6 col-md-offset-4">
        <div class="form-style">
            @*<form action="@Url.Content("~/Access/Recuperacion")" method="post">
            <h2 class="sub-header">Recuperación de contraseña</h2>
            @Html.HiddenFor(d => d.token)
            <div class="form-group">
                <label for="Password">Escribe tu nueva contraseña</label>
                @Html.PasswordFor(d => d.Password, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(d => d.Password, null, new { @Class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="Password2">Vuelve a escribir tu contraseña</label>
                @Html.PasswordFor(d => d.Password2, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(d => d.Password2, null, new { @Class = "text-danger" })
            </div>
            @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ContainsKey(""))
            {
                <div style="color:red;" role="alert">
                    @Html.ValidationSummary(true)
                </div>
            }
            <div class="text-danger">
                @ViewBag.Error
            </div>
            <div class="text-success">
                @ViewBag.Message
            </div>
            <div class="text-right">
                <button type="submit" class="btn btn-primary">Recuperar</button>
                <button class="btn btn-default">@Html.ActionLink("Iniciar Sesión", "Presentacion", "Account")</button>
            </div>

        </form>*@
            <h2 class="sub-header">Recuperación de contraseña</h2>
            @Html.Hidden("hfToken", "", new { Value = @ViewBag.EncryptToken })
            @Html.Hidden("hfTokenPass", "", new { Value = @ViewBag.TokenPass })
            <div class="form-group">
                <label for="Password">Escribe tu nueva contraseña</label> <span class="requerido">(*)</span>
                @*@Html.PasswordFor(d => d.Password, new { @class = "form-control", autocomplete = "off" })
            @Html.ValidationMessageFor(d => d.Password, null, new { @Class = "text-danger" })*@
                @Html.Password("Password", "", new { Class = "form-control", maxlength = "50", autofocus = "autofocus", autocomplete = "off", required = "" })
            </div>
            <div class="form-group">
                <label for="Password2">Vuelve a escribir tu contraseña</label> <span class="requerido">(*)</span>
                @*@Html.PasswordFor(d => d.Password2, new { @class = "form-control", autocomplete = "off" })
            @Html.ValidationMessageFor(d => d.Password2, null, new { @Class = "text-danger" })*@
                @Html.Password("Password2", "", new { Class = "form-control", maxlength = "50", autocomplete = "off", required = "" })
            </div>
            @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ContainsKey(""))
            {
                <div style="color:red;" role="alert">
                    @Html.ValidationSummary(true)
                </div>
            }

            <div class="row">
                <div class="col-md-16">
                    <p style="padding:8px; font-size:12px;" class="control-label bg-info">
                        <i class="fa fa-info-circle"></i> <strong><u>Considerar que:</u></strong><br />
                        - La contraseña debe tener como mínimo 8 caracteres.<br />
                        - La contraseña debe tener por lo menos una letra MAYÚSCULA.<br />
                        - La contraseña debe tener por lo menos una letra MINÚSCULA.<br />
                        - La contraseña debe tener por lo menos un NÚMERO.<br />
                        - La contraseña debe tener por lo menos un CARACTER ESPECIAL (Ejemplo: * $ # & .)<br />
                    </p>
                </div>
            </div>

            <div class="text-danger">
                <span id="lblMsj"></span>
            </div>
            <div class="text-success">
                <span id="lblMsjOk"></span>
            </div>
            <div class="text-right">
                <button id="btnRecuperar" class="btn btn-primary">Recuperar</button>
                <button class="btn btn-default">@Html.ActionLink("Iniciar Sesión", "Presentacion", "Account")</button>
            </div>

        </div>
    </div>
</div>

<script type="text/javascript" nonce="@Html.ScriptNonce()" src="~/Scripts/vendor/modernizr-2.7.1-respond-1.4.2.min.js"></script>
<script type="text/javascript" nonce="@Html.ScriptNonce()" src="~/Scripts/vendor/jquery-3.5.1.min.js"></script>
<script type="text/javascript" nonce="@Html.ScriptNonce()" src="~/Scripts/aes.js"></script>
<script type="text/javascript" nonce="@Html.ScriptNonce()" src="~/Scripts/json/json2.js"></script>

<script nonce="@Html.ScriptNonce()" type="text/javascript">
    $(document).ready(function () {
        $("[id$=btnRecuperar]").click(function () {
            FUNCIONES.Recuperar();
            return false;
        });

        var FUNCIONES = {
            //
            Recuperar: function () {
                $("#lblMsj").html("");
                $("#lblMsjOk").html("");
                var datParam = new Object();
                var token = $("#hfToken").val();
                datParam.token = $("[id$=hfTokenPass]").val();
                datParam.Password = $("[id$=Password]").val();
                datParam.Password2 = $("[id$=Password2]").val();
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    url: window.location.href.replace("Access/Recuperacion?token=" + $("[id$=hfTokenPass]").val(),"Access/RecuperacionPass"),
                    data: JSON.stringify({ 'parametros': Encrypt(JSON.stringify(datParam), token) }),
                    success: function (result) {
                        result = FUNCIONES.GetResult(result, token);
                        var datTabla = result.Dato;
                        var msgTabla = result.Msg;
                        if (datTabla) {
                            $("[id$=Password]").val("");
                            $("[id$=Password2]").val("");
                            $("#lblMsjOk").html(msgTabla);
                        } else {
                            $("#lblMsj").html(msgTabla);
                        }
                    },
                });
            },
            //
            GetResult: function (result, token) {
                if (result == undefined)
                    return;

                var decrypted = Decrypt(result, token);

                if (isJSON(decrypted)) {
                    result = JSON.parse(decrypted);
                } else {
                    result = decrypted;
                }
                return result;
            },

        }

        function removeSpaces(str) {
            return str = str.replace(/\s+/g, '');
        }

        /***ENCRYPT****/
        function Encrypt(textValue, keyValue) {

            if (textValue === null) {
                return null;
            }
            if (textValue === undefined) {
                return undefined;
            }
            if (textValue.replace(/^\s+|\s+$/gm, '') === "") {
                return textValue;
            }
            var key = CryptoJS.enc.Utf8.parse(keyValue);
            var result = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(textValue), key,
                {
                    keySize: 128 / 8, iv: key,
                    mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7
                });

            var encrypted = result.toString();

            return encodeURIComponent(encrypted);
        }
        function Decrypt(encryptedText, pkey) {
            if (encryptedText === null) {
                return null;
            }
            if (encryptedText === undefined) {
                return undefined;
            }

            if (encryptedText.replace(/^\s+|\s+$/gm, '') === "") {
                return encryptedText;
            }
            var key = CryptoJS.enc.Utf8.parse(pkey);

            encryptedText = decodeURIComponent(encryptedText);

            var result = CryptoJS.AES.decrypt(encryptedText, key,
                {
                    keySize: 128 / 8, iv: key,
                    mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7
                });

            var decrypted = result.toString(CryptoJS.enc.Utf8);
            return decrypted;
        }

        function isJSON(item) {
            item = typeof item !== "string"
                ? JSON.stringify(item)
                : item;

            try {
                item = JSON.parse(item);
            } catch (e) {
                return false;
            }

            if (typeof item === "object" && item !== null) {
                return true;
            }

            return false;
        }

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min)) + min;
        }



    });
</script>